#!/usr/bin/perl
use strict;

use Time::HiRes qw(usleep);
use Fcntl qw(:flock);

=head1 NAME

spkpi-demo - Demostrate operation with entertaining displays.

=head1 DESCRIPTION

Demonstrates the operation of the system by displaying
entertaining patterns on the LEDs of the control/driver
boards.

The sprinklerpi files directory must be known.
The default is "../sprinklerpi" but this can be overriden
by specifying it as the first argument.

    spkpi-demo "../sprinklerpi"

=head1 AUTHOR

    Jeremiah Mahler <jmmahler@gmail.com>
    http://github.com/jmahler

=head1 COPYRIGHT

Copyright (c) 2014, Jeremiah Mahler. All Rights Reserved.
This module is free software.  It may be used, redistributed
and/or modified under the same terms as Perl itself.

=cut

my $dir = '../sprinklerpi';  # default
if (@ARGV) {
	$dir = shift @ARGV;
} elsif (exists $ENV{DIR}) {
	$dir = $ENV{DIR};
}

(-e $dir)
	or die "Required directory '$dir' does not exist!";

my $cfg = {
	verbose => 1,
};

# {{{ get_mode
sub get_mode {
	my ($dir) = @_;

	my $mode_file = "$dir/mode";
	my $mode = `cat $mode_file`;
	chomp($mode);

	return $mode;
}
# }}}

# {{{ water
sub water {
	my $cmd = shift;

	my @vs = split //, $cmd;

	for (my $i = 1; $i <= 3; $i++) {
		my $file = "$dir/valves/group-$i";
		unless (open(OUT, ">>", $file)) {
			print STDERR "Unable to open '$file': $!";
			next;
		}
		flock(OUT, LOCK_EX);
		truncate OUT, 0;
		print OUT $vs[$i-1] . "\n";
		flock(OUT, LOCK_UN);
		close(OUT);
	}
}
# }}}

# Turn off valves during Ctrl-C quit
$SIG{INT} = sub {
	water("000");
	exit(0);
};

my $counter_mode = 0;
my $last_mode = get_mode($dir);

while (1) {

	my $cur_mode = get_mode($dir);
	if ($last_mode eq 'demo' and $cur_mode ne 'demo') {
		water("000");
	}
	$last_mode = $cur_mode;

	if ('demo' ne $cur_mode) {
		print "mode != 'demo', sleeping\n" if $cfg->{verbose};
		sleep 5;
		next;
	}

	# Each of the different demos is run in sequence.
	# To make the time of each demo the same, the sleep
	# time is calculated according to the number of steps.

	# all same, forward then backward
	print "forward <-> backward #1\n" if $cfg->{verbose};
	my $steps = 3*(8 + 8);
	my $T = 2;  # time period, seconds
	my $sleep = $T/$steps;
	for (my $n = 0; $n < 3; $n++) {
		for (my $i = 1; $i <= 8; $i++) {
			water("$i$i$i");
			usleep($sleep*1e6);
		}
		for (my $i = 8; $i >= 1; $i--) {
			water("$i$i$i");
			usleep($sleep*1e6);
		}
	}
	next if ('demo' ne get_mode($dir));

	# end to end, forward then backward
	print "forward <-> backward #2\n" if $cfg->{verbose};
	my $steps = 3*9*6;
	my $T = 2;  # time period, seconds
	my $sleep = $T/$steps;
	for (my $n = 0; $n < 3; $n++) {

		for (my $i = 0; $i <= 8; $i++) {
			my $cmd = "00" . "$i";
			water($cmd);
			usleep($sleep*1e6);
		}

		for (my $i = 0; $i <= 8; $i++) {
			my $cmd = "0" . "$i" . "0";
			water($cmd);
			usleep($sleep*1e6);
		}

		for (my $i = 0; $i <= 8; $i++) {
			my $cmd = "$i" . "00";
			water($cmd);
			usleep($sleep*1e6);
		}

		for (my $i = 8; $i >= 0; $i--) {
			my $cmd = "$i" . "00";
			water($cmd);
			usleep($sleep*1e6);
		}

		for (my $i = 8; $i >= 0; $i--) {
			my $cmd = "0" . "$i" . "0";
			water($cmd);
			usleep($sleep*1e6);
		}

		for (my $i = 8; $i >= 0; $i--) {
			my $cmd = "00" . "$i";
			water($cmd);
			usleep($sleep*1e6);
		}
	}
	next if ('demo' ne get_mode($dir));

	# full speed, sleep only at 4
	print "full speed\n" if $cfg->{verbose};
	for (my $n = 0; $n < 24; $n++) {
		for (my $i = 0; $i <= 8; $i++) {
			water("$i$i$i");
			if ((4 == $i) and (12 == $n)) {
				usleep(0.5*1e6);
			}
		}
		for (my $i = 8; $i >= 0; $i--) {
			water("$i$i$i");
			if ((4 == $i) and (23 == $n)) {
				usleep(0.5*1e6);
			}
		}
	}
	next if ('demo' ne get_mode($dir));

=pod
	# counter
	print "counter\n" if $cfg->{verbose};
	my $steps = 9*9*9;
	my $T = 3;  # time period, seconds
	my $sleep = $T/$steps;
	for (my $i = 0; $i <= 8; $i++) {
		for (my $j = 0; $j <= 8; $j++) {
			for (my $k = 0; $k <= 8; $k++) {
				if (0 == $counter_mode) {
					water("$k$j$i");
				} elsif (1 == $counter_mode) {
					water("$i$k$j");
				} else {
					water("$j$i$k");
				}
				usleep($sleep*1e6);
			}
		}
	}
	if (++$counter_mode > 2) {
		$counter_mode = 0;	
	}
=cut
}
